# А, В, Е, К, М, Н, О, Р, С, Т, У и Х
import re

license_plates = 'А578Е777 ОР233787 К901МН666 СТ46599 СНИ2929П777 666АМР666'
private_template = r'[АВЕКМНОРСТУХ]\d{3}[АВЕКМНОРСТУХ]{2}\d{2,3}'
taxi_template = r'[АВЕКМНОРСТУХ]{2}\d{3}\d{2,3}'
private_cars = re.findall(private_template, license_plates)
taxi_cars = re.findall(taxi_template, license_plates)
print(f'Список номеров частных автомобилей {private_cars}')
print(f'Список номеров такси {taxi_cars}')

text_for_counting = '''
Регулярное выражение — это строка, задающая шаблон поиска подстрок в тексте. Одному шаблону может соответствовать 
много разных строчек. Термин «Регулярные выражения» является переводом английского словосочетания «Regular expressions». 
Перевод не очень точно отражает смысл, правильнее было бы «шаблонные выражения». Регулярное выражение, 
или коротко «регулярка», состоит из обычных символов и специальных командных последовательностей. 
Например, d задаёт любую цифру, а d+ — задает любую последовательность из одной или более цифр. 
Работа с регулярками реализована во всех современных языках программирования. Однако существует несколько «диалектов», 
поэтому функционал регулярных выражений может различаться от языка к языку. В некоторых языках программирования 
регулярками пользоваться очень удобно (например, в питоне), в некоторых — не слишком (например, в C++).'''
rule_for_counting = r'[а-яА-Я-]{3,}'
words = re.findall(rule_for_counting, text_for_counting)
print(len(words))

pattern = r'\s*([А-Яа-яЁё]+)(\d+)\s*'
string = r'---   Опять45   ---'
matched = re.search(pattern, string)
print(f'{matched[0]} {matched.start(0)} - {matched.group(1)}, {matched.end(0)} - {matched.group(2)}')
