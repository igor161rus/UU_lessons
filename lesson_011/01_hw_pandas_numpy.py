# Опробуйте основные способы работы с библиотеками numpy и pandas
# Скачайте с сайта Garmin Connect свои тренировки в формате csv.
# С помощью библиотеки pandas проанализируйте скачанные данные

import pandas
import numpy

print('Series — одномерный массив')
my_series = pandas.Series([5, 6, 7, 8, 9, 10])
print(my_series)
print('\nФильтрация данных массива по условию')
print(my_series[my_series > 7])

print('\nДанные получены numpy.arange(5), index - список меток.')
s = pandas.Series(numpy.arange(5), index=['a', 'b', 'c', 'd', 'e'])
print(s, '\n')

print('numpy.linspace(0, 1, 5) создаем массив от 0 до 1 (включая 1), равномерно разбитый на 5, '
      'те с приращением 0.25. \n Series создает массив с данными 0.00, 0.25 - 1.00 и автоматическими метками '
      'от 0 до 4')
s = pandas.Series(numpy.linspace(0, 1, 5))
print(s, '\n')

print('Выбор элемента по его индексу')
print(s[1], '\n')

print('DataFrame работает с двумерными табличными данными')
uu_lessons_dict = {'uu_lessons': ['lesson_8', 'lesson_9', 'lesson_10'],
                       'work': [5, 8, 5],
                       'home_work': [3, 5, 3]}
uu_lessons = pandas.DataFrame(uu_lessons_dict)
uu_lessons.index = ['Исключения', 'Инструменты функционального программирования', 'Мультипоточность']
print(uu_lessons)
print()
print('Количество уроков и домашних заданий в модуле Исключения')
print(uu_lessons.loc['Исключения'])

print('------- pandas ---------')
print('Файл Activities.csv экспортирован из Garmin Connect')
trainings = pandas.read_csv('Activities.csv')
print('Печать первых 10ти значений')
print(trainings.head(10), '\n')

# Все поля представлены как строки, причем в колонке "Максимальная высота" высота больше 1000 м указана как 1,000
# Убираем запятую в колонке "Максимальная высота". Также некоторые поля содержат "--" меняем на 0
trainings['Максимальная высота'] = trainings['Максимальная высота'].str.replace(',', '')
trainings['Максимальная высота'] = trainings['Максимальная высота'].str.replace('--', '0')
trainings['Общий подъем'] = trainings['Общий подъем'].str.replace(',', '')
trainings['Общий подъем'] = trainings['Общий подъем'].str.replace('--', '0')
# Теперь можно изменить тип данных в этой колонке на int и применить фильтрацию
trainings['Общий подъем'] = trainings['Общий подъем'].astype(int)
trainings["Максимальная высота"] = trainings["Максимальная высота"].astype(int)

# Для фильтрации по году добавим поле 'Год', которое будет содержать только год
trainings['Дата'] = trainings['Дата'].astype('datetime64[ns]')
trainings['Год'] = trainings['Дата'].dt.to_period('Y')

print('*' * 10, '\n', 'Вывод тренировок за 2023')
year = '2023'
print(trainings.loc[trainings['Год'] == year], '\n')
distance = trainings.loc[trainings['Год'] == year, 'Расстояние'].sum()
print(f'За {year} проехал {distance} км\n')
elevation = trainings.loc[trainings['Год'] == year, 'Общий подъем'].sum()
print(f'За {year} набрано высоты {elevation} м\n')

print('\n Тренировки на которых набрано больше 1000м')
elev_1000 = trainings[trainings['Общий подъем'] > 1000]
print(elev_1000[['Дата',
                 'Время',
                 'Расстояние',
                 'Общий подъем']].sort_values(['Дата',
                                               'Время',
                                               'Расстояние',
                                               'Общий подъем'], ascending=True).head(10))


# Результат
# C:\Python\Python38\python.exe C:\Python\Projects\UU_lessons\lesson_011\01_hw_pandas_numpy.py
# Series — одномерный массив
# 0     5
# 1     6
# 2     7
# 3     8
# 4     9
# 5    10
# dtype: int64
#
# Фильтрация данных массива по условию
# 3     8
# 4     9
# 5    10
# dtype: int64
#
# Данные получены numpy.arange(5), index - список меток.
# a    0
# b    1
# c    2
# d    3
# e    4
# dtype: int32
#
# numpy.linspace(0, 1, 5) создаем массив от 0 до 1 (включая 1), равномерно разбитый на 5, те с приращением 0.25.
#  Series создает массив с данными 0.00, 0.25 - 1.00 и автоматическими метками от 0 до 4
# 0    0.00
# 1    0.25
# 2    0.50
# 3    0.75
# 4    1.00
# dtype: float64
#
# Выбор элемента по его индексу
# 0.25
#
# DataFrame работает с двумерными табличными данными
#                                              uu_lessons  work  home_work
# Исключения                                     lesson_8     5          3
# Инструменты функционального программирования   lesson_9     8          5
# Мультипоточность                              lesson_10     5          3
#
# Количество уроков и домашних заданий в модуле Исключения
# uu_lessons    lesson_8
# work                 5
# home_work            3
# Name: Исключения, dtype: object

# ------- pandas ---------
# Файл Activities.csv экспортирован из Garmin Connect
# Печать первых 10ти значений
#     Тип занятия                 Дата  ...  Минимальная высота Максимальная высота
# 0  Велотренажер  2024-02-18 19:31:31  ...                   0               1,047
# 1  Велотренажер  2024-02-17 06:00:56  ...                   4                 249
# 2  Велотренажер  2024-02-16 20:01:01  ...                 279                 696
# 3  Велотренажер  2024-02-15 05:01:52  ...                 279                 696
# 4  Велотренажер  2024-02-13 20:01:05  ...                  22                  54
# 5  Велотренажер  2024-02-12 20:01:25  ...                   4                 249
# 6  Велотренажер  2024-02-11 07:00:56  ...                  -6                  28
# 7  Велотренажер  2024-02-10 07:02:35  ...                  -6                  28
# 8  Велотренажер  2024-02-01 05:02:28  ...                  -6                 132
# 9  Велотренажер  2024-01-30 20:01:16  ...                  -6                 516
#
# [10 rows x 46 columns]
#
# **********
#  Вывод тренировок за 2023
#       Тип занятия                Дата  ...  Максимальная высота   Год
# 22   Велотренажер 2023-12-31 07:02:20  ...                  100  2023
# 23   Велотренажер 2023-12-30 07:01:06  ...                   34  2023
# 24   Велотренажер 2023-12-29 19:01:29  ...                   34  2023
# 25   Велотренажер 2023-12-28 20:11:36  ...                   34  2023
# 26   Велотренажер 2023-12-28 05:01:26  ...                   58  2023
# ..            ...                 ...  ...                  ...   ...
# 306  Велотренажер 2023-01-21 07:59:59  ...                  249  2023
# 307  Велотренажер 2023-01-20 06:02:33  ...                  249  2023
# 308  Велотренажер 2023-01-19 06:02:09  ...                   34  2023
# 309  Велотренажер 2023-01-17 05:00:15  ...                 1543  2023
# 310  Велотренажер 2023-01-13 06:15:25  ...                   58  2023
#
# [289 rows x 47 columns]
#
# За 2023 проехал 8007.4800000000005 км
#
# За 2023 набрано высоты 104810 м
#
#
#  Тренировки на которых набрано больше 1000м
#                    Дата     Время  Расстояние  Общий подъем
# 814 2020-08-01 06:45:12  03:26:52       73.06          2503
# 751 2020-10-04 15:31:16  02:12:14       40.57          1189
# 712 2020-11-29 05:00:42  02:08:13       49.89          1156
# 704 2020-12-06 16:32:30  01:41:36       26.86          1178
# 521 2022-02-26 07:07:33  01:47:37       30.95          1048
# 516 2022-03-19 06:02:13  01:44:29       30.95          1048
# 424 2022-07-30 06:00:41  02:10:12       38.22          1540
# 423 2022-07-31 06:00:44  01:51:11       36.25          1205
# 354 2022-10-30 12:10:17  01:11:04       30.93          1048
# 350 2022-11-04 15:00:15  01:17:53       32.91          1057
#
# Process finished with exit code 0