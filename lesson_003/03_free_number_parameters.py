call_list = []


def test(*args):
    """Функция с произвольным числом параметров разного типа. Функция распечатывает все параметры """
    print('Параметры функции test')
    print(f'Всего передано параметров: {len(args)}')
    for val, i in enumerate(args):
        if type(i) is str:
            print(f'\nПараметр: {val + 1} Строка, равен: {i}\nДлина строки {len(i)} символов')
        elif type(i) is list:
            print(f'\nПараметр: {val + 1} Список, равен: {i}\nКол-во элементов {len(i)}\nЭлементы списка:')
            for j in i:
                print(j)
        elif type(i) is int:
            print(f'\nПараметр: {val + 1} Целое, равен: {i}')
        else:
            print(f'\nПараметр: {val + 1} Что-то не понятное, класса {str(type(i))} равен: {i}')


def factorial(n):
    """Рекурсивная функция, которая считает факториал от числа n"""
    if n == 1:
        return 1
    call_list.append(n)
    print(f'Список рекурсивных вызовов  {call_list}')
    fact_1 = factorial(n=n - 1)
    return n * fact_1


print(test.__doc__)
test(1, 20, 'gfgfhg', [1, 2, 3], {1: 'fhgf', 2: 'tytyu'}, ('fhgf', 'ioui', 'wsdg'))

print('\n')
print(factorial.__doc__)
print(factorial(6))

# Результат
#
# D:\Python\Python39\python.exe D:\Python\Projects\UU\lessons\lesson_003\03_free_number_parameters.py
# Функция с произвольным числом параметров разного типа. Функция распечатывает все параметры
# Параметры функции test
# Всего передано параметров: 6
#
# Параметр: 1 Целое, равен: 1
#
# Параметр: 2 Целое, равен: 20
#
# Параметр: 3 Строка, равен: gfgfhg
# Длина строки 6 символов
#
# Параметр: 4 Список, равен: [1, 2, 3]
# Кол-во элементов 3
# Элементы списка:
# 1
# 2
# 3
#
# Параметр: 5 Что-то не понятное, класса <class 'dict'> равен: {1: 'fhgf', 2: 'tytyu'}
#
# Параметр: 6 Что-то не понятное, класса <class 'tuple'> равен: ('fhgf', 'ioui', 'wsdg')
#
#
# Рекурсивная функция, которая считает факториал от числа n
# Список рекурсивных вызовов  [6]
# Список рекурсивных вызовов  [6, 5]
# Список рекурсивных вызовов  [6, 5, 4]
# Список рекурсивных вызовов  [6, 5, 4, 3]
# Список рекурсивных вызовов  [6, 5, 4, 3, 2]
# 720
